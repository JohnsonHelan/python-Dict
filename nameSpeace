#############################################################################################################
#   title:      nemaeSpace 命名空间
#   个人理解：  在解决全局命名冲突问题时，引入了命名空间的概念
#    key:       命名空间 全局命名冲突 标签 LEBG
#############################################################################################################
```
    通俗的来说，Python中所谓的命名空间可以理解为一个容器。在这个容器中可以装许多标识符。
不同容器中的同名的标识符是不会相互冲突的。理解python的命名空间需要掌握三条规则：
    第一，赋值（包括显式赋值和隐式赋值）产生标识符，赋值的地点决定标识符所处的命名空间。
    第二，函数定义（包括def和lambda）产生新的命名空间。
    第三，python搜索一个标识符的顺序是"LEGB"。

    所谓的"LEGB"是python中四层命名空间的英文名字首字母的缩写。
最里面的一层是L（local），表示在一个函数定义中，而且在这个函数里面没有再包含函数的定义。
第二层E(enclosing function)，表示在一个函数定义中，但这个函数里面还包含有函数的定义，其实L层和E层只是相对的。
第三层G(global)，是指一个模块的命名空间，也就是说在一个.py文件中定义的标识符，但不在一个函数中。
第四层B（builtin），是指python解释器启动时就已经具有的命名空间，之所以叫builtin是因为在python解释器
启动时会自动载入__builtin__模块，这个模块中的list、str等内置函数的就处于B层的命名空间中。
```
